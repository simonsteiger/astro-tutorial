---
import BaseLayout from "../layouts/BaseLayout.astro";
import Icon from "../components/Icon.astro";
import type { iconPaths } from "../components/IconPaths";

const iconLinks: {
  label: string;
  icon: keyof typeof iconPaths;
}[] = [
  { label: "game", icon: "game-controller" },
  { label: "movie", icon: "monitor-play" },
  { label: "bino", icon: "binoculars" },
  { label: "fire", icon: "fire" },
  { label: "water", icon: "water" },
  { label: "plant", icon: "plant" },
  { label: "psychic", icon: "psychic" },
];

const gameIcon = iconLinks.find((link) => link.label === "game");
const movieIcon = iconLinks.find((link) => link.label === "movie");
const binoIcon = iconLinks.find((link) => link.label === "bino");
const fireIcon = iconLinks.find((link) => link.label === "fire");
const waterIcon = iconLinks.find((link) => link.label === "water");
const plantIcon = iconLinks.find((link) => link.label === "plant");
const psychicIcon = iconLinks.find((link) => link.label === "psychic");

const identity = {
  firstName: "Simon",
  type: "Psycho",
  country: "Sweden",
  occupation: "Doctoral Student",
  hobbies: ["birdwatching", "baking", "programming"],
};
---

<BaseLayout>
  <div class="flex justify-center items-start gap-8">
    <div
      class="w-full max-w-96 md:w-3/5 rounded overflow-hidden shadow-lg border-yellow-300"
      style="border-width: 0.75rem;"
    >
      <div
        class="bg-violet-300 flex flex-row items-end justify-between pt-2 pb-1 px-6"
      >
        <div>
          <p class="text-xs text-slate-700">Basic</p>
          <p class="text-2xl font-bold text-slate-700">{identity.firstName}</p>
        </div>
        <div class="flex flex-row items-center justify-between gap-1">
          <p class="text-lg font-bold text-slate-700">80 HP</p>
          <Icon icon={psychicIcon.icon} gradient size="2em" />
        </div>
      </div>
      <div class="bg-violet-300 px-6">
        <div
          class="w-full bg-white shadow-lg border-yellow-300 aspect-[10/7]"
          style="border-width: 0.5rem;"
        >
          <!-- This div replaces the previous img element -->
        </div>
      </div>
      <div class="bg-violet-300 px-6 py-4">
        <p
          class="flex items-center text-md text-slate-700 rounded text-base py-2 hover:bg-violet-400 cursor-pointer transition-colors duration-200"
          id="aquaknarre"
          data-content="Schiggy, Aquaknarre!"
        >
          <span class="text-xl mr-2 flex flex-row flex-shrink-0">
            <Icon icon={plantIcon.icon} gradient />
            <Icon icon={waterIcon.icon} gradient />
          </span>
          <span class="flex items-center">
            <strong>Aquaknarre</strong>&nbsp;-&nbsp;<span class="text-xs"
              >and some more text.</span
            >
          </span>
        </p>
        <hr class="border-black border my-1" />
        <p
          class="flex items-center text-md text-slate-700 rounded text-base py-2 hover:bg-violet-400 cursor-pointer transition-colors duration-200"
          id="psychokinese"
          data-content="Psychokinese activated!"
        >
          <span class="text-xl mr-2 flex flex-row flex-shrink-0">
            <Icon icon={fireIcon.icon} gradient />
            <Icon icon={psychicIcon.icon} gradient />
          </span>
          <span class="flex items-center">
            <strong>Psychokinese</strong>&nbsp;-&nbsp;<span class="text-xs"
              >and some more text.</span
            >
          </span>
        </p>
      </div>
      <div class="bg-violet-300 px-6 pb-2">
        <hr class="border-black border" />
        <div class="flex flex-row justify-between space-x-6 py-1">
          <span
            class="text-xs flex-1 flex flex-col items-center justify-center text-center rounded py-1 text-sm font-semibold text-gray-700 hover:bg-violet-400 cursor-pointer transition-colors duration-200"
            id="baking"
            data-content="Baking activated!"
            >weakness{
              binoIcon && <Icon icon={binoIcon.icon} gradient size="1.5em" />
            }</span
          >
          <span
            class="text-xs flex-1 flex flex-col items-center justify-center text-center rounded py-1 text-sm font-semibold text-gray-700 hover:bg-violet-400 cursor-pointer transition-colors duration-200"
            id="julia"
            data-content="Julia activated!"
          >
            resistance
            {movieIcon && <Icon icon={movieIcon.icon} gradient size="1.5em" />}
          </span>
          <span
            class="text-xs flex-1 flex flex-col items-center justify-center text-center rounded py-1 text-sm font-semibold text-gray-700 hover:bg-violet-400 cursor-pointer transition-colors duration-200"
            id="birds"
            data-content="Birds activated!"
            >retreat
            {gameIcon && <Icon icon={gameIcon.icon} gradient size="1.5em" />}</span
          >
        </div>
        <div class="text-xs text-start italic px-1 py-1 border-black border-2">
          <span
            >Some very random facts, maybe about hobbies, who knows, is it too
            long yet...?</span
          >
        </div>
      </div>
    </div>
    <div class="w-full md:w-2/5">
      <div class="text-start pb-5">
        <p class="sm:text-lg md:text-xl lg:text-2xl xl:text-4xl font-bold">
          A wild {identity.occupation} appeared!
        </p>
      </div>
      <p id="hoverContent">
        This is the right section of the page, which takes up 1/3 of the
        available width.
      </p>
    </div>
  </div>
</BaseLayout>

<script>
  const hoverContent = document.getElementById("hoverContent");
  const interactiveElements =
    document.querySelectorAll<HTMLElement>("[data-content]");

  let activeElement = null;

  const defaultContent =
    "This is the right section of the page, which takes up 1/3 of the available width.";

  function updateContent(content) {
    if (hoverContent) {
      hoverContent.textContent = content;
    }
  }

  function updateActiveStyles() {
    interactiveElements.forEach((el) => {
      el.classList.toggle("bg-violet-500", el === activeElement);
      el.classList.toggle("text-white", el === activeElement);
    });
  }

  interactiveElements.forEach((element) => {
    element.addEventListener("mouseover", () => {
      if (!activeElement) {
        updateContent(element.dataset.content);
      }
    });

    element.addEventListener("mouseout", () => {
      if (!activeElement) {
        updateContent(defaultContent);
      }
    });

    element.addEventListener("click", () => {
      if (activeElement === element) {
        activeElement = null;
        updateContent(defaultContent);
      } else {
        activeElement = element;
        updateContent(element.dataset.content);
      }
      updateActiveStyles();
    });
  });

  // Initialize styles
  updateActiveStyles();
</script>
